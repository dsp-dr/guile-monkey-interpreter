;;; note: auto-compilation is enabled, set GUILE_AUTO_COMPILE=0
;;;       or pass the --no-auto-compile argument to disable.
;;; compiling /home/dsp-dr/ghq/github.com/dsp-dr/guile-monkey-interpreter/src/experiments/103-mermaid-visualizer/./generate-ast-diagram.scm
WARNING: (guile-user): imported module (monkey ast ast) overrides core binding `identifier?'
WARNING: (guile-user): imported module (monkey ast ast) overrides core binding `boolean?'
;;; WARNING: compilation of /home/dsp-dr/ghq/github.com/dsp-dr/guile-monkey-interpreter/src/experiments/103-mermaid-visualizer/./generate-ast-diagram.scm failed:
;;; Syntax error:
;;; /home/dsp-dr/ghq/github.com/dsp-dr/guile-monkey-interpreter/src/experiments/103-mermaid-visualizer/./generate-ast-diagram.scm:234:0: definition in expression context, where definitions are not allowed, in form (define (generate-ast-diagram input) "Generate Mermaid diagram for parsed input" (let* ((l (make-lexer input)) (p (make-parser l)) (prog (parse-program p))) (format #t "graph TD~%") (format #t "    %% AST for: ~a~%" input) (format #t "~%") (if (null? (parser-errors p)) (begin (ast->mermaid prog #f) (format #t "~%") (format #t "    %% Styling~%") (format #t "    classDef statement fill:#f9f,stroke:#333,stroke-width:2px~%") (format #t "    classDef expression fill:#bbf,stroke:#333,stroke-width:2px~%") (format #t "    classDef literal fill:#bfb,stroke:#333,stroke-width:2px~%")) (begin (format #t "    Error[\"Parse Errors:\"]~%") (for-each (lambda (err) (let ((err-id (next-node-id))) (format #t "    ~a[\"~a\"]~%" err-id err) (format #t "    Error --> ~a~%" err-id))) (parser-errors p))))))
WARNING: (guile-user): imported module (monkey ast ast) overrides core binding `identifier?'
WARNING: (guile-user): imported module (monkey ast ast) overrides core binding `boolean?'
ice-9/boot-9.scm:222:17: In procedure map1:
Syntax error:
experiments/103-mermaid-visualizer/generate-ast-diagram.scm:234:0: definition in expression context, where definitions are not allowed, in form (define (generate-ast-diagram input) "Generate Mermaid diagram for parsed input" (let* ((l (make-lexer input)) (p (make-parser l)) (prog (parse-program p))) (format #t "graph TD~%") (format #t "    %% AST for: ~a~%" input) (format #t "~%") (if (null? (parser-errors p)) (begin (ast->mermaid prog #f) (format #t "~%") (format #t "    %% Styling~%") (format #t "    classDef statement fill:#f9f,stroke:#333,stroke-width:2px~%") (format #t "    classDef expression fill:#bbf,stroke:#333,stroke-width:2px~%") (format #t "    classDef literal fill:#bfb,stroke:#333,stroke-width:2px~%")) (begin (format #t "    Error[\"Parse Errors:\"]~%") (for-each (lambda (err) (let ((err-id (next-node-id))) (format #t "    ~a[\"~a\"]~%" err-id err) (format #t "    Error --> ~a~%" err-id))) (parser-errors p))))))
